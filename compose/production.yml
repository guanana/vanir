version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}

x-common-build:
  build: &build
    context: ..
    dockerfile: ./compose/production/django/Dockerfile

x-db-depends:
  depends_on: &db-depends
    - postgres
    - redis
  env_file: &db-env
    - ../.envs/.production/.django
    - ../.envs/.production/.postgres

services:
  vanir:
    build: *build
    depends_on: *db-depends
    env_file: *db-env
    image: vanir_production_vanir
    command: /start
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5000" ]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres:
    build:
      context: ..
      dockerfile: ./compose/postgres/Dockerfile
    image: vanir_production_postgres
    volumes:
      - production_postgres_data:/var/lib/postgresql/data:Z
      - production_postgres_data_backups:/backups:z
    env_file:
      - ../.envs/.production/.postgres

  traefik:
    build:
      context: ..
      dockerfile: ./compose/production/traefik/Dockerfile
    image: vanir_production_traefik
    command: --api.insecure=true --providers.docker
    depends_on:
      - vanir
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      - "0.0.0.0:5555:5555"

  redis:
    image: redis:6

  celeryworker:
    build: *build
    depends_on: *db-depends
    env_file: *db-env
    image: vanir_production_celeryworker
    command: /start-celeryworker

  celerybeat:
    build: *build
    depends_on:
      - postgres
      - redis
      - vanir
    env_file: *db-env
    image: vanir_production_celerybeat
    command: /start-celerybeat

  flower:
    build: *build
    depends_on: *db-depends
    env_file: *db-env
    image: vanir_production_flower
    command: /start-flower
